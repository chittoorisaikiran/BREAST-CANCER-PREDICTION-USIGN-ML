# -*- coding: utf-8 -*-
"""Breast Cancer Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UrmlgtIZ9NyqDbfRpPJ3y_rT-fC4BBtc

**Breast Cancer Prediction Using Logistic Regression**
"""

# import the libraries
import numpy as np
import sklearn.datasets

#getting the dataset

breast_cancer = sklearn.datasets.load_breast_cancer()
print(breast_cancer)

x = breast_cancer.data
y = breast_cancer.target
print(x)
print(y)
print(x.shape,y.shape)

"""Import data to the Data Frame"""

import pandas as pd
data = pd.DataFrame(breast_cancer.data , columns = breast_cancer.feature_names)
#column is feature names should be kept they are feature names 
data['class'] = breast_cancer.target
#class represents the labels here
data.head()

#To know statistics of the data we use describe
data.describe()

print(data['class'].value_counts())

#To know how many malignant ang benign cases are there in the dataset

print(breast_cancer.target_names)

data.groupby('class').mean()
#to know the mean values of malignant and benign

"""**Main way to classify the type of cancer**

***The malignant stage cancer the values of the cells are bigger compared to malignant stage cancer ***

***0 is for  Malignant

1 is for  Benign***

Train and Test Split
"""

from sklearn.model_selection import train_test_split

x_train , x_test ,y_train , y_test = train_test_split(x, y ,test_size = 0.1) 
# In the above we have used 0.1% that is 10% of the data for testing purpose

print( y.mean() , y_train.mean() , y_test.mean)
#to get the mean value similar in all the y datasets we use stratify

x_train , x_test ,y_train , y_test = train_test_split(x, y ,test_size = 0.1 ,stratify=y)
print( y.mean() , y_train.mean() , y_test.mean)

#If any person what to split the data same as others then we can use random state
#random state is used to reproduce the code
x_train , x_test ,y_train , y_test = train_test_split(x, y ,test_size = 0.1 ,stratify=y , random_state =1)

"""**test_size=== to specify the percentage of test data needed

> 


stratify === to split the data correctly as of the original data

> 


random_state === specific split of data. each value of random_state splits the data differently** 
"""

#Here the stratify is not useful for x_train and x_test

"""**Logistic Regression**"""

#import logistic regression from sklearn
from sklearn.linear_model import LogisticRegression
classifier =  LogisticRegression()
# Loading the logistic regression model to the variable 'classifier'

#To know the meaning of the code we can use below code  
classifier.fit?
#we need to put '?' mark after the dought

classifier.fit(x_train ,y_train )

"""**To check the accuracy of our model**"""

from sklearn.metrics import accuracy_score
#accuracy_score?#for knowing abt accuracy score
prediction_on_training_data =classifier.predict(x_train)
accuracy_on_training_data = accuracy_score(y_train , prediction_on_training_data)
print('accuracy on traing data :',accuracy_on_training_data )

prediction_on_test_data =classifier.predict(x_test)
accuracy_on_test_data = accuracy_score(y_test , prediction_on_test_data)
print('accuracy on test data :',accuracy_on_test_data )

"""Detecting whether the patient has breat cancer in benign or malignant stage"""

input_data=(13.54,14.36,87.46,566.3,0.09779,0.08129,0.06664,0.04781,0.1885,0.05766,0.2699,0.7886,2.058,23.56,0.008462,0.0146,0.02387,0.01315,0.0198,0.0023,15.11,19.26,99.7,711.2,0.144,0.1773,0.239,0.1288,0.2977,0.07259
)
#change the input_data to numpy_array to make prediction
input_data=np.asarray(input_data)
print(input_data)
#reshape the array as we are predicting the output for one instance
input_data_reshaped = input_data.reshape(1,-1)
#Prediction 
print(input_data_reshaped)
prediction = classifier.predict(input_data_reshaped)
print(prediction) # returns a list with element [0] if Malignant or returns a list with element [1] if Benign.
if(prediction[0]==0):
  print('The breat cancer is Malignant')
else:
    print('The breast cancer is Benign')